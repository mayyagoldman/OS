mayagoldman, omri.asher
Maya Goldman (321616401), Omri Asher (313195992)
EX: 5

FILES:
container.cpp - container implementation
sockets.cpp - sockets implementation
Makefile - the makefile
README - this file

REMARKS:

¯\_(^ . ^)_/¯

ANSWERS:

1. 
Because PID namespaces separate the process ID number space, 
processes in different PID namespaces can have the same PID. 
Containers can use PID namespaces to provide functionality like suspending/resuming
a set of processes in the container or moving the container to a new host while keeping the PIDs the same.

2. 
Mount namespaces are a powerful and flexible tool for creating per-user and per-container filesystem trees.
Creating a separate mount namespace allows each of these isolated processes to have a completely different view
of the entire system's mount point structure from the original one. 
This allows you to have a different root for each isolated process, 
as well as other mount points that are specific to those processes.

3. 
Cgroups enable the distribution of resources — such as CPU time, 
system memory, and network bandwidth — among processes.


4.
Clone() creates a new child process. Various parameters of this system call, 
specify which parts of the parent process must be copied into the child process and which parts will be shared between them. 
As a result, this system call can be used to create all kinds of execution entities, 
starting from threads and finishing with completely independent processes. 
In fact, the clone() system call is the base that is used for the fork() system call. 
Clone() differs from fork() in that it allows for more precise control over which execution 
context elements are shared between the calling and child processes. 


5. 
The chroot command is used to change the root directory. 
Every process has a current working directory called the root directory. 
chroot changes the root directory for currently running processes as well as its child processes.


6. 
The proc file system is a mounted file system used to trace a process system call, 
receive signals, and incurred machine faults. 
The proc file system provides access to the state of each active process and thread in the system. 
It is known as a "pseudo-filesystem", which means it is not a true filesystem that is consuming storage. 
The files and directories in procfs are entry points into kernel tables. 
The proc filesystem provides a method of communication between kernel space and user space. 
